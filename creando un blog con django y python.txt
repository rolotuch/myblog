// trabjando con python y entorno virtual
//crear un nuevo entorno virtual, dentro de una carpeta previamente creada
// en el cmd teclear
C:\proyectos> python -m venv myvenv  // myvenv es el nombre del entorno virtual

// luego iniciar el entorno virtual

C:\proyectos> myvenv\Scripts\activate

//para saber si estamos dentro del entorno virtual basta con ver el prompt, se deberia ver algo asi.

(myvenv) C:\proyectos>

// instalar djago
(myvenv) C:\proyectos> python -m pip install --upgrade pip

//Instalar paquetes con un fichero de requisitos (requirements), Primero crea un archivo requirements.txt dentro de tu directorio proyectos
//Dentro del fichero proyectos/requirements.txt deberías tener el siguiente texto

Django~3.0.2  // la version de django puede ser la que desees

//Ahora, ejecuta pip install -r requirements.txt para instalar Django.
(myvenv) C:\proyectos> pip install -r requirements.txt

// ahora crearemos la primera aplicacion en django
// crearemos un blog sencillo
// crear un proyecto

(myvenv) C:\proyectos>django-admin.exe startproject erpvetas . // no olvides el punto(dejar espacio entre el nombre y el punto, erpvetas es el nombre del proyecto.
// te crara una estructura como la siguiente
proyectos
├───manage.py
├───erpvetas
│        settings.py
│        urls.py
│        wsgi.py
│        __init__.py
└───requirements.txt

// cambiando la configuración

(myvenv) C:\proyectos\erpvetas>settings.py

//se abrira el archivo en el editor preferido, lo primero es la zona horaria, busca TIME_ZONE = 'Europe/Berlin' y cambiala a TIME_ZONE = 'America/Guatemala'
// puedes consultar  lista de Wikipedia de las zonas horarias, para una mejor comprension
TIME_ZONE = 'America/Guatemala'

// idioma
LANGUAGE_CODE = 'es'

//ambién tenemos que añadir una ruta para archivos estáticos. (Veremos todo acerca de archivos estáticos y CSS más adelante.)
//Ve al final del archivo, y justo debajo de la entrada STATIC_URL, añade una nueva llamada STATIC_ROOT:

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

//Cuando DEBUG es True y ALLOWED_HOST esta vacío, el host es validado contra ['localhost', '127,0.0.1', '[::1]']. Una vez despleguemos nuestra
//aplicación este no sera el mismo que nuestro nombre de host en PythonAnywhere así que cambiaremos la siguiente opción:

ALLOWED_HOSTS = ['127.0.0.1', '.pythonanywhere.com']

// para una base de datos en la version de django 3.0 y viene predefinada con la de sqlite3, si quieres otro gestor de bd, tienes que cambiar lo siguieente
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

//Para crear una base de datos para nuestro blog, ejecutemos lo siguiente en la consola:
(myvenv) C:\proyectos>python manage.py migrate
//(necesitamos estar en el directorio de proyectos que contiene el archivo manage.py)

// se vera algo como esto
Operations to perform:
  Apply all migrations: auth, admin, contenttypes, sessions
Running migrations:
  Rendering model states... DONE
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying sessions.0001_initial... OK


//listo ahora iniciamos el servidor web

//Debes estar en el directorio que contiene el archivo manage.py
(myvenv) C:\proyectos>python manage.py runserver

// la consola se quedara en modo escucha
//enga en cuenta que una ventana de comandos sólo puede ejecutar una cosa a la vez, y la ventana de comandos que abrió antes está ejecutando el servidor web.
//Mientras el servidor web esté corriendo y esperando solicitudes adicionales, la terminal aceptará nuevo texto pero no ejecutará nuevos comandos.
// en el navegador preferido escribimos la siguiente url
http://127.0.0.1:8000/

//si todo salio bien deberiamos de ver algo como esto
¡La instalación funcionó con éxito! ¡Felicitaciones!
Estás viendo esta página porque DEBUG=True está en tu archivo de configuración y no has configurado ningún URL.

//crear una aplicación
//Para mantener todo en orden, crearemos una aplicación separada dentro de nuestro proyecto. Es muy bueno tener todo organizado desde el principio.
//Para crear una aplicación, necesitamos ejecutar el siguiente comando en la consola (dentro de la carpeta de proyectos donde está el archivo manage.py)

(myvenv) C:\proyectos>python manage.py startapp blog
// se  vera algo como esto
proyectos
├── blog
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── migrations
│   │   └── __init__.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── db.sqlite3
├── manage.py
├── eprvetas
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
└── requirements.txt

//Después de crear una aplicación, también necesitamos decirle a Django que debe utilizarla. Eso se hace en el fichero erpvetas/settings.py -- ábrelo en el editor.
//Tenemos que encontrar INSTALLED_APPS y agregar una línea que contiene 'blog.apps.BlogConfig', justo por encima de ]. El producto final debe tener este aspecto:
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog.apps.BlogConfig',
]
//Crear el modelo del Post
//En el archivo blog/models.py definimos todos los objetos llamados Models. Este es un lugar en el cual definiremos nuestra entrada del blog.

//Abre blog/models.py en el editor, borra todo, y escribe código como este:

from django.db import models
from django.utils import timezone

class Post(models.Model):
    author = models.ForeignKey('auth.User', on_delete=models.CASCADE)
    title = models.CharField(max_length=200)
    text = models.TextField()
    created_date = models.DateTimeField(
            default=timezone.now)
    published_date = models.DateTimeField(
            blank=True, null=True)

    def publish(self):
        self.published_date = timezone.now()
        self.save()

    def __str__(self):
        return self.title
//Todas las líneas que comienzan con from o import son líneas para agregar algo de otros archivos.
//Así que en vez de copiar y pegar las mismas cosas en cada archivo, podemos incluir algunas partes con from... import ....

//class Post(models.Model):, esta línea define nuestro modelo (es un objeto).

//class es una palabra clave que indica que estamos definiendo un objeto.
//Post es el nombre de nuestro modelo. Podemos darle un nombre diferente (pero debemos evitar espacios en blanco y caracteres especiales).
//Siempre inicia el nombre de una clase con una letra mayúscula.
//models.Model significa que Post es un modelo de Django, así Django sabe que debe guardarlo en la base de datos.
//Ahora definimos las propiedades de las que hablábamos: title, text, created_date, published_date y author.
//Para ello tenemos que definir el tipo de cada campo (¿es texto? ¿un número? ¿una fecha? ¿una relación con otro objeto como un User (usuario)?)

//models.CharField, así es como defines un texto con un número limitado de caracteres.
//models.TextField, este es para texto largo sin límite. Suena perfecto para el contenido de la entrada del blog, ¿no?
//models.DateTimeField, este es fecha y hora.
//modelos.ForeignKey, este es una relación (link) con otro modelo.

//Crear tablas para los modelos en tu base de datos

//el último paso aquí es agregar nuestro nuevo modelo a la base de datos. Primero tenemos que hacer saber a Django que hemos hecho cambios en nuestro modelo.
// (Lo acabamos de crear!) Ve a tu terminal y escribe python manage.py makemigrations blog. Se verá así:

(myvenv) C:\proyectos>python manage.py makemigrations
Migrations for 'blog':
  blog/migrations/0001_initial.py:

  - Create model Post

//Django preparó un archivo de migración que ahora tenemos que aplicar a nuestra base de datos. Escribe python manage.py migrate blog y el resultado debería ser:

(myvenv) C:\proyectos>python manage.py migrate blog
Operations to perform:
  Apply all migrations: blog
Running migrations:
  Applying blog.0001_initial... OK


//Administrador de Django

//Para agregar, editar y borrar los posts que hemos modelado, usaremos el administrador (admin) de Django.

//Abre el fichero blog/admin.py en el editor y reemplaza su contenido con esto:
(myvenv) C:\proyectos\blog>admin.py

from django.contrib import admin
from .models import Post

admin.site.register(Post)

//Ok, es hora de ver nuestro modelo Post. Recuerda ejecutar python manage.py runserver en la consola para correr el servidor web.
//Ve a tu navegador y escribe la dirección http://127.0.0.1:8000/admin/. Verás una página de inicio de sesión.

//Para iniciar sesión, deberás crear un superusuario (superuser), que es un usuario que tiene control sobre todo el sitio.
//Vuelve a la línea de comandos, escribe python manage.py createsuperuser y pulsa enter.

(myvenv) C:\proyectos>python manage.py createsuperuser

//Cuando te lo pida, escribe tu nombre de usuario (en minúscula, sin espacios), email y contraseña.
//No te preocupes si no puedes ver la contraseña que estás tecleando - así es como debe ser.
//Tecléalo y pulsa intro para continuar. Luego, verás algo así (donde username y email serán los que escribiste anteriormente):

Username: ola
Email address: ola@example.com
Password:
Password (again):
Superuser created successfully.

//Vuelve a tu navegador. Entra con las credenciales de super usuario que escogiste; verás el panel de administrador de Django.

